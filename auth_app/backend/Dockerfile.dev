# TaskFlow API Dockerfile
# Multi-stage build for optimized production image

# ================================
# Build Stage
# ================================
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++ curl

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies)
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Create necessary directories
RUN mkdir -p uploads logs backups

# Set permissions
RUN chmod +x scripts/*.sh || true

# ================================
# Development Stage
# ================================
FROM node:18-alpine AS development

# Install development tools
RUN apk add --no-cache curl postgresql-client

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies)
RUN npm ci && npm cache clean --force

# Copy source code
COPY . .

# Create directories
RUN mkdir -p uploads logs backups

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start development server
CMD ["npm", "run", "dev"]

# ================================
# Production Stage
# ================================
FROM node:18-alpine AS production

# Install production dependencies and utilities
RUN apk add --no-cache \
    curl \
    postgresql-client \
    tini \
    && rm -rf /var/cache/apk/*

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S taskflow -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && \
    npm cache clean --force && \
    rm -rf /tmp/*

# Copy built application from builder stage
COPY --from=builder --chown=taskflow:nodejs /app .

# Create and set permissions for necessary directories
RUN mkdir -p uploads logs backups && \
    chown -R taskflow:nodejs /app && \
    chmod -R 755 /app && \
    chmod -R 777 uploads logs backups

# Switch to non-root user
USER taskflow

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Use tini as entrypoint for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "server.js"]

# ================================
# Testing Stage
# ================================
FROM development AS testing

# Copy test files
COPY tests/ ./tests/

# Run tests
RUN npm test

# ================================
# Metadata
# ================================
LABEL maintainer="TaskFlow Team <team@taskflow.app>"
LABEL description="TaskFlow API - Task management and time tracking backend"
LABEL version="1.0.0"
LABEL org.opencontainers.image.source="https://github.com/taskflow/api"
LABEL org.opencontainers.image.documentation="https://docs.taskflow.app"
LABEL org.opencontainers.image.licenses="MIT"