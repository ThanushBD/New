version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskflow_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-auth_app}
      POSTGRES_USER: ${DB_USER:-auth_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./utils/database.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backups:/backups
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - taskflow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-auth_user} -d ${DB_NAME:-auth_app}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis (Optional - for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: taskflow_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - taskflow_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Node.js API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: taskflow_api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-auth_app}
      DB_USER: ${DB_USER:-auth_user}
      DB_PASSWORD: ${DB_PASSWORD:-your_secure_password}
      DB_SSL: false
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}
      
      # Email
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_SECURE: ${EMAIL_SECURE}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      
      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      
      # URLs
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      BACKEND_URL: ${BACKEND_URL:-http://localhost:3000}
      
      # Security
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      HELMET_CSP_ENABLED: ${HELMET_CSP_ENABLED:-true}
      
      # Rate limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # Features
      FEATURE_TASK_TEMPLATES: ${FEATURE_TASK_TEMPLATES:-true}
      FEATURE_ADVANCED_REPORTING: ${FEATURE_ADVANCED_REPORTING:-true}
      FEATURE_TIME_TRACKING_GOALS: ${FEATURE_TIME_TRACKING_GOALS:-true}
      
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskflow_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: taskflow_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
    networks:
      - taskflow_network
    profiles:
      - production

  # Database backup service
  db_backup:
    image: postgres:15-alpine
    container_name: taskflow_backup
    restart: "no"
    environment:
      PGHOST: postgres
      PGDATABASE: ${DB_NAME:-auth_app}
      PGUSER: ${DB_USER:-auth_user}
      PGPASSWORD: ${DB_PASSWORD:-your_secure_password}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskflow_network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  taskflow_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16